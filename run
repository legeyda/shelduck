#!/bin/sh
set -eu

main() {
	test -n "$1" || run_die 'required argument missing'

	: "${SHELDUCK_BUILD_BOBSHELL_URL:=https://raw.githubusercontent.com/legeyda/bobshell/refs/heads/unstable}"
	: "${SHELDUCK_BUILD_ROOT:=./target}"
	# shellcheck disable=SC2145
	run_"$@"
}

run_init() {
	jqscript='.["files.readonlyInclude"]["target/**"]=true'

	file=.vscode/settings.json
	if [ ! -e "$file" ] || [ ! -s "$file" ]; then
		mkdir -p .vscode
		printf '{}' > "$file"
	fi


	tempfile=$(mktemp)
	cp --no-target-directory "$file" "$tempfile"
	jq "$jqscript" "$tempfile" > "$file"
	unset jqscript file tempfile
}

run_die() {
  # https://github.com/biox/pa/blob/main/pa
  printf '%s: %s.\n' "$(basename "$0")" "${*:-error}" >&2
  exit 1
}

run_usage() {
	printf '%s\n' "Usage: $0 build"
}

run_clean() {
	rm -rf "${SHELDUCK_BUILD_ROOT:?}"/*
}

run_build() {
	run_build_shelduck
	go_build_installer
}


transitive_imports_before=''
transitive_imports_after='str/replace.sh str/quote.sh append/val_to_var.sh code/defun.sh misc/defun.sh event/compile.sh event/fire.sh event/listen.sh misc/awk.sh redirect/input.sh redirect/io.sh redirect/output.sh regex/match.sh result/read.sh result/set.sh notrace.sh'

run_build_shelduck() {
	mkdir -p "$SHELDUCK_BUILD_ROOT"
	all_imports=$(sed -n "s|^shelduck import $SHELDUCK_BUILD_BOBSHELL_URL/\(.*\)$|\1|gp" < shelduck.sh)
	{
		for dependency in $transitive_imports_before $all_imports $transitive_imports_after; do
			fetch_dependency "$dependency"
			printf '\n%s\n\n' "$fetch_dependency_result"
		done
		sed "s|^shelduck import $SHELDUCK_BUILD_BOBSHELL_URL/\(.*\)$||g" < shelduck.sh
	} > "$SHELDUCK_BUILD_ROOT/shelduck.sh"
	
	unset dependency fetch_dependency_result
}

go_build_installer() {
	mkdir -p "$SHELDUCK_BUILD_ROOT"
	. "$SHELDUCK_BUILD_ROOT/shelduck.sh"
	{
		shelduck resolve "$SHELDUCK_BUILD_BOBSHELL_URL/header.sh"
		printf '\n\n%s\n\n\n' 'shelduck_src=$(cat<<\SHELDUCK_INSTALLER_EOF'
		cat "$SHELDUCK_BUILD_ROOT/shelduck.sh"
		printf '%s\n' 'SHELDUCK_INSTALLER_EOF'
		printf '%s\n\n\n' ')'
		shelduck resolve "file://install.sh"
	} > "$SHELDUCK_BUILD_ROOT/install.sh"
}

run_build_installer() {
	run_build_shelduck
	go_build_installer
}

fetch_dependency() {
	fetch_url "$1"
	fetch_dependency_result=$(printf '%s' "$fetch_url_result" | sed -E 's/^(shelduck .*)$/# disable recursive dependency resolution when building shelduck itself\n# \1/g')
	unset fetch_url_result
	fetch_dependency_result="$fetch_dependency_result


"
}

fetch_url() {
	fetch_url_result="$(curl --fail --silent --show-error --location "$SHELDUCK_BUILD_BOBSHELL_URL/$1")"
}






run_test() {
	run_build
	go_test_shelduck
	go_test_installer
}

go_test_shelduck() {
	. "$SHELDUCK_BUILD_ROOT/shelduck.sh"
	eval_dependency assert.sh
	
	shelduck import -a test_echo file://./example/smoketest.sh
	assert_equals 'ahoi (starts with a)' "$(test_echo ahoi)"
	echo 'all tests passed'

	test 'hello from baz 1 2 3' = "$(sh -euxc ". '$SHELDUCK_BUILD_ROOT/shelduck.sh'
shelduck import ./test/test.sh
fun 1 2 3")"

	sh -euxc ". '$SHELDUCK_BUILD_ROOT/shelduck.sh'
shelduck resolve ./test/test.sh" > target/test.sh
	test 'hello from baz 1 2 3' = "$(sh -euxc ". '$SHELDUCK_BUILD_ROOT/test.sh'; fun 1 2 3")"

	echo 'shelduck tests passed'
}

go_test_installer() {
	SHELDUCK_INSTALL_ROOT="$SHELDUCK_BUILD_ROOT/test-installer" sh "$SHELDUCK_BUILD_ROOT/install.sh"
}

run_test_shelduck() {
	run_build_shelduck
	go_test_shelduck
}

run_test_installer() {
	run_build_installer
	go_test_installer
}

eval_dependency() {
	fetch_dependency "$1"
	eval "$fetch_dependency_result"
	unset fetch_dependency_result
}

run_install() {
	run_build
	SHELDUCK_LIBRARY_URL=file://$(realpath "$SHELDUCK_BUILD_ROOT/shelduck.sh") sh "$SHELDUCK_BUILD_ROOT/install.sh"
}

run_ci_build() {
	run_clean
	run_build_shelduck
	go_test_shelduck
	go_build_installer
	go_test_installer
}

run_ci_release() {
	run_ci_build
	if ! _shelduck_tag=$(git describe --exact-match); then
		echo "no tag, skip publish release"
		exit 1
	fi
	if [ -n "${SHELDUCK_GITHUB_TOKEN:-}" ]; then
		GITHUB_TOKEN="$SHELDUCK_GITHUB_TOKEN"	
	fi
	if [ -z "${GITHUB_TOKEN:-}" ]; then
		echo "no github token, skip publish release"
		exit 1
	fi

	export GITHUB_TOKEN
	hub release create --attach "$SHELDUCK_BUILD_ROOT/shelduck.sh" --attach "$SHELDUCK_BUILD_ROOT/install.sh" --message "Release $_shelduck_tag" "$_shelduck_tag"
}

main "$@"
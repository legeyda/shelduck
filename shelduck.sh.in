
# see https://github.com/ajdiaz/bashdoc


# fun: shelduck CLIARGS...
# api: public
shelduck() {
	bobshell_require_not_empty "${1:-}" 'shelduck: subcommad expected, see shelduck usage'
	case "$1" in
		(usage|import|resolve|run)
				shelduck_subcommand="$1"
				shift
				"shelduck_$shelduck_subcommand" "$@" ;;
		(*) printf 'unknown subcommand %s, see shelduck usage' "$1"
	esac
}


# fun: shelduck_run URL [COMMAND [ARGS...]]
# api: private
shelduck_run() {
	bobshell_require_not_empty "${1:-}" 'usage: shelduck_run'

	shelduck_run_url="${1:-}"
	if [ -r "$shelduck_run_url" ]; then
		shelduck_run_script_path="$shelduck_run_url"
		shelduck_run_url="file://$shelduck_run_url"
	elif bobshell_starts_with "$shelduck_run_url" file:// shelduck_run_script_path; then
		true
	else
		shelduck_run_script_path="$0"
	fi

	: "${SHELDUCK_LIB:=$HOME/.local/share/shelduck/shelduck.sh}"
	if [ ! -r "$SHELDUCK_LIB" ]; then
		bobshell_die 'shelduck library not found at SHELDUCK_LIB=$SHELDUCK_LIB'
	fi

	shift
	shelduck_run_args=$(bobshell_quote "$@")


	export shelduck_run_script_path
	export shelduck_run_args

	sh -euxc ". '$SHELDUCK_LIB'
#shelduck_run_script_data=\$(cat '$shelduck_run_script_path')
#eval \"\$shelduck_run_script_data\"
. '$shelduck_run_script_path'
";
}

# api: private
shelduck_import() {
	# todo skip duplicate urls
	shelduck_import_script=$(shelduck_resolve "$@")
	eval "$shelduck_import_script"
	unset shelduck_import_script
}


# api: private
shelduck_usage() {
	printf 'Usage: shelduck SUBCOMMAND [ARGS...]\n'
	printf 'Subcommands are:\n'
	printf '    usage\n'
	printf '    import\n'
	printf '    resolve\n'
}


# fun: shelduck_resolve CLIARGS...
# api: private
shelduck_resolve() {
	# set starting parameters
	shelduck_url_history=
	shelduck_alias_strategy="${SHELDUCK_ALIAS_STRATEGY:-wrap}"
	
	# delegate
	shelduck_print "${SHELDUCK_BASE_URL:-}" "$@"
}



# fun: shelduck_print BASEURL CLIARGS...
# env: shelduck_url_history
#      shelduck_alias_strategy
# txt: parse cli and delegate to shelduck_print_tree
# api: private
shelduck_print() {
	shelduck_print_base_url="$1"
	shift

	shelduck_parse_cli "$@"
	shelduck_parse_cli_url=$(bobshell_resolve_url "$shelduck_parse_cli_url" "$shelduck_print_base_url")
	set -- "$shelduck_parse_cli_url" "$shelduck_parse_cli_aliases"
	unset shelduck_print_base_url shelduck_parse_cli_url shelduck_parse_cli_aliases
	
	# load script
	shelduck_print_script=$(shelduck_print_origin "$@")
	set -- "$shelduck_print_script" "$@"
	unset shelduck_print_script

	# check if dependency was already compiled
	if ! bobshell_contains "$shelduck_url_history" "$2"; then
		shelduck_compile "$@"
		shelduck_url_history="$shelduck_url_history $2"
	fi

	# print additions, if needed
	shelduck_print_addition "$@"
}

# fun: shelduck_parse_cli [CLIARGS...]
# env: shelduck_parse_cli_url
#      shelduck_parse_cli_aliases
# api: private
shelduck_parse_cli() {
	# parse cli, save to local array: ABSURL [ALIAS...]
	shelduck_parse_cli_url=
	shelduck_parse_cli_aliases=
	while [ "${1+defined}" = defined ]; do
		case "$1" in
			-a|--alias)
				shift;
				if [ -z "${1:-}" ]; then
					bobshell_die "alias argument expected to be not empty"
				fi
				shelduck_parse_cli_aliases="$shelduck_parse_cli_aliases $1"
				shift
				;;
			*)
				if [ -z "${1:-}" ]; then
					bobshell_die "url expected to be nonempty"
				fi
				if [ -n "$shelduck_parse_cli_url" ]; then
					bobshell_die "only one url allowed ($1)"
				fi
				shelduck_parse_cli_url="$1"
				shift
				;;
		esac
	done
	if [ -z "$shelduck_parse_cli_url" ]; then
		bobshell_die "url expected to set"
	fi
}



# fun: shelduck_compile SCRIPT ABSURL ALIASES
# txt: print recusively expanded shelduck commands, and print rewritten rest of script
# api: private
shelduck_compile() {
	shelduck_compile_input="$1"
	shift
	if bobshell_starts_with "$shelduck_compile_input" "$bobshell_newline"; then
		printf '%s\n' "# shelduck: source for $1"	
	fi

	shelduck_compile_before=
	shelduck_compile_after=
	while true; do
		if bobshell_remove_prefix "$shelduck_compile_input" 'shelduck import ' shelduck_compile_after; then
			shelduck_compile_input="$shelduck_compile_after"
		elif ! bobshell_split_first "$shelduck_compile_input" "${bobshell_newline}shelduck import " shelduck_compile_before shelduck_compile_after; then
			break
		else

			# print everything before the first found shelduck command
			shelduck_rewrite "$shelduck_compile_before$bobshell_newline" "$@"
			shelduck_compile_input="$shelduck_compile_after$bobshell_newline"
		
		fi

		

		shelduck_compile_command=
		while true; do
			if ! bobshell_split_first "$shelduck_compile_input" "${bobshell_newline}" shelduck_compile_before shelduck_compile_after; then
				shelduck_compile_command="$shelduck_compile_input"
				shelduck_compile_input=
				break
			fi

			if ! bobshell_remove_suffix "$shelduck_compile_before" '\' shelduck_compile_before; then
				shelduck_compile_command="$shelduck_compile_command$shelduck_compile_before"
				shelduck_compile_input="$bobshell_newline$shelduck_compile_after"
				break;
			fi
			
			shelduck_compile_command="$shelduck_compile_command${shelduck_compile_before}"
			shelduck_compile_input="$shelduck_compile_after"

		done
		
		# assert shelduck argument command line not empty
		if [ -z "$shelduck_compile_command" ]; then
			bobshell_die 'empty shelduck arguments'
		fi

		# get base url to pass ot depenencies
		shelduck_compile_base_url=
		if [ -n "$1" ]; then
			shelduck_compile_base_url=$(bobshell_base_url "$1")
		fi

		# before recursive call, save variables to local array
		set -- "$shelduck_compile_input" "$@"

		# recursive call, concously not double qouting
		# shellcheck disable=SC2086
		shelduck_print "$shelduck_compile_base_url" $shelduck_compile_command

		# after recursive call, restore variables from local array
		shelduck_compile_input="$1"
		shift
	done
				

	# print everything after last found shelduck command
	shelduck_rewrite "$shelduck_compile_input" "$@"
}





# fun: shelduck_print_origin ABSURL
# txt: prints original script without modification
# api: private
shelduck_print_origin() {
	shelduck_cached_fetch_url "$1"
}




# fun: shelduck_rewrite ORIGCONTENT URL ALIASES
# txt: rewrite original script (e.g. rename functions)
# api: private
shelduck_rewrite() {
	if [ rename = "${shelduck_alias_strategy:-}" ]; then
		bobshell_die "shelduck_alias_strategy: value $shelduck_alias_strategy not supported"
	fi
	# comment out shelduck dependency directive
	printf %s "$1"
}




# fun: shelduck_print_addition ORIGCONTENT ABSURL ALIASES
# txt: print script additional code (e.g. aliases)
# api: private
shelduck_print_addition() {

	if [ wrap != "$shelduck_alias_strategy" ]; then
		# nothing to do, wrap was the only supported customization
		return
	fi

	# analyze functions (for aliases)
	regex='^ *([A-Za-z0-9_]+) *\( *\) *\{ *$' # match shell function declaration '  function_name  (   )  {  '
	shelduck_print_addition_function_names="$(printf %s "$1" | sed --silent --regexp-extended "s/$regex/\1/p")"
	unset regex
	# todo detect function name collizion and print warning if so
	

	# analyze aliases
	for arg in $3; do
		# todo assert $arg not empty
		if ! bobshell_split_first "$arg" = key value; then
			key="$arg"
			value="$arg"
		fi
		bobshell_require_not_empty "$key"   line "$arg": key   expected not to be empty
		bobshell_require_not_empty "$value" line "$arg": value expected not to be empty
		
		shelduck_print_script_function_name="$(printf %s "$shelduck_print_addition_function_names" | grep -E "^.*$value\$" || true)"
		if [ -n "$shelduck_print_script_function_name" ] && [ "$key" != "$shelduck_print_script_function_name" ]; then
			printf '\n\n'
			printf '\n # shelduck: alias for %s (from %s)' "$shelduck_print_script_function_name" "$2" 
			printf '\n%s() {' "$key"
			printf '\n	%s "$@"' "$shelduck_print_script_function_name"
			printf '\n}'
			printf '\n'
		fi
		unset key value shelduck_print_script_function_name
	done
	unset shelduck_print_addition_function_names
}




# fun: shelduck_cached_fetch_url ABSURL
# txt: download dependency given url and save to cache
# api: private
shelduck_cached_fetch_url() {
	# bypass cache if local file
	if bobshell_remove_prefix "$1" 'file://' file_name; then
		# shellcheck disable=SC2154
		# starts_with sets variable file_name indirectly
		if ! [ -f "$file_name" ]; then
			bobshell_die "shelduck: dependency fetch error '$1': file '$file_name' not found"
		fi
		cat "$file_name" || bobshell_die "shelduck: dependency fetch error '$1': error loading '$file_name'"
		unset file_name
		return
	fi
	# todo implement cache
	# todo timeout
	bobshell_fetch_url "$1" || bobshell_die "shelduck: dependency fetch error '$1': error downloading '$1'"
}



# see https://github.com/ajdiaz/bashdoc


# fun: shelduck CLIARGS...
shelduck() {
	shelduck_eval "$@"
}



shelduck_usage() {
	printf %s 'Usage: shelduck URL [ALIAS...]'
}



# fun: shelduck_eval CLIARGS...
shelduck_eval() {
	shelduck_eval_script="$(shelduck_print "$@" || bobshell_die 'shelduck_eval: error calling shelduck_print')"
	eval "$shelduck_eval_script"
	unset shelduck_eval_script
}



# fun: shelduck_print CLIARGS...
shelduck_print() {
	# set starting parameters
	shelduck_url_history=
	shelduck_alias_strategy="${SHELDUCK_ALIAS_STRATEGY:-wrap}"
	
	# delegate
	shelduck_print_internal "${SHELDUCK_BASE_URL:-}" "$@"
}




# fun: shelduck_print_internal BASEURL CLIARGS...
# env: shelduck_url_history
#      shelduck_alias_strategy
# txt: parse cli and delegate to shelduck_print_tree
shelduck_print_internal() {
	# todo normal cli

	# 
	shelduck_print_internal_absurl=$(bobshell_resolve_url "$2" "$1")
	shift 2

	shelduck_print_tree "$shelduck_print_internal_absurl" "$@"
	unset shelduck_print_internal_absurl
}


# fun: shelduck_print_tree URL [ALIAS...]
# txt: print rewrite, customization for this script and all dependencies recursively
shelduck_print_tree() {

	# resolve abs url
	shelduck_print_tree_absurl="$1"
	shift 

	# base url
	shelduck_print_tree_base_url=$(bobshell_base_url "$shelduck_print_tree_absurl")

	# load script
	shelduck_print_tree_orig_script=$(shelduck_print_original "$shelduck_print_tree_absurl" "$@")

	
	# script was not already been handled, handle it
	if ! bobshell_contains "$shelduck_url_history" "$shelduck_print_tree_absurl"; then

		# shelduck_print_dependencies is recursive call
		# save to local array
		set -- "$shelduck_print_tree_absurl" "$shelduck_print_tree_base_url" "$shelduck_print_tree_orig_script" "$@"
		
		# print dependencis (calls shelduck_print_tree recursively through shelduck_print_internal)
		shelduck_alias_strategy=wrap
		shelduck_print_dependencies "$shelduck_print_tree_base_url" "$shelduck_print_tree_orig_script"
	
		# restore local variables after recursive call
		shelduck_print_tree_absurl="$1"
		shelduck_print_tree_base_url="$2"
		shelduck_print_tree_orig_script="$3"
		shift 3

		# print (rewritten) script
		shelduck_print_rewrite "$shelduck_print_tree_orig_script" "$shelduck_print_tree_absurl" "$@"

		# mark url as handled
		shelduck_url_history="$shelduck_url_history $shelduck_print_tree_absurl"
	fi

	shelduck_print_addition "$shelduck_print_tree_orig_script" "$shelduck_print_tree_absurl" "$@"


	unset shelduck_print_tree_absurl shelduck_print_tree_base_url shelduck_print_tree_orig_script
}


# fun: shelduck_print_dependencies BASEURL ORIGSCRIPT
# txt: supports recursion
shelduck_print_dependencies() {
	# grep for shelduck commands and save to $1
	shelduck_print_dependencies_lines=$(printf %s "$2" | sed --silent --regexp-extended 's/^ *shelduck (.*)$/\1/pg')
	set -- "$1" "$shelduck_print_dependencies_lines"
	unset shelduck_print_dependencies_lines

	shelduck_print_dependencies_part=
	# shellcheck disable=SC2016
	# shellcheck disable=SC2154
	bobshell_for_each_part "$2" "$bobshell_newline" shelduck_print_dependencies_part \
			eval shelduck_print_internal "'$1'" '$shelduck_print_dependencies_part'
	unset newline shelduck_print_dependencies_part
}





# fun: shelduck_print_original ABSURL [ALIAS...]
# txt: prints original script without modification
shelduck_print_original() {
	shelduck_cached_fetch_url "$1"
}




# fun: shelduck_reprint_script ORIGCONTENT ABSURL [ALIAS...]
# txt: rewrite original script (e.g. comment out shelduck import commands, or rename function)
shelduck_print_rewrite() {
	if [ rewrite = "$shelduck_alias_strategy" ]; then
		bobshell_die "shelduck_alias_strategy: value $shelduck_alias_strategy not supported"
	fi
	# comment out shelduck dependency directive
	printf %s "$1" | sed --regexp-extended 's/^ *(shelduck .*)$/# shelduck import will be handled\n# \1/g'
}




# fun: shelduck_print_addition ORIGCONTENT ABSURL [ALIAS...]
# txt: print script additional code (e.g. aliases) 
shelduck_print_addition() {

	if [ wrap != "$shelduck_alias_strategy" ]; then
		# nothing to do, wrap was the only supported customization
		return
	fi

	# analyze functions (for aliases)
	regex='^ *([A-Za-z0-9_]+) *\( *\) *\{ *$' # match shell function declaration '  function_name  (   )  {  '
	shelduck_print_addition_function_names="$(printf %s "$1" | sed --silent --regexp-extended "s/$regex/\1/p")"
	unset regex
	# todo detect function name collizion and print warning if so
	

	# analyze aliases
	shelduck_print_addition_url="$2"
	shift 2
	for arg in "$@"; do
		# todo assert $arg not empty
		if ! bobshell_split_key_value "$arg" = key value; then
			key="$arg"
			value="$arg"
		fi
		bobshell_require_not_empty "$key"   line "$arg": key   expected not to be empty
		bobshell_require_not_empty "$value" line "$arg": value expected not to be empty
		
		shelduck_print_script_function_name="$(printf %s "$shelduck_print_addition_function_names" | grep -E "^.*$value\$" || true)"
		if [ -n "$shelduck_print_script_function_name" ]; then
			if [ wrap = "$shelduck_alias_strategy" ]; then
				printf '\n\n'
				printf '\n # shelduck: alias for %s (from %s)' "$shelduck_print_script_function_name" "$shelduck_print_addition_url" 
				printf '\n%s() {' "$key"
				printf '\n	%s "$@"' "$shelduck_print_script_function_name"
				printf '\n}'
				printf '\n'
			else
				bobshell_die "shelduck_alias_strategy: value $shelduck_alias_strategy not supported"
			fi
		fi
		unset key value shelduck_print_script_function_name
	done
	unset shelduck_print_addition_function_names shelduck_print_addition_url
}




# fun: shelduck_cached_fetch_url ABSURL
# txt: download dependency given url and save to cache
shelduck_cached_fetch_url() {
	# bypass cache if local file
	if bobshell_starts_with "$1" 'file://' file_name; then
		# shellcheck disable=SC2154
		# starts_with sets variable file_name indirectly
		if ! [ -f "$file_name" ]; then
			bobshell_die "shelduck: dependency fetch error '$1': file '$file_name' not found"
		fi
		cat "$file_name" || bobshell_die "shelduck: dependency fetch error '$1': error loading '$file_name'"
		unset file_name
		return
	fi
	# todo implement cache
	# todo timeout
	bobshell_fetch_url "$1" || bobshell_die "shelduck: dependency fetch error '$1': error downloading '$1'"
}

